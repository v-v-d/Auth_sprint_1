"""Initial migration.

Revision ID: 4fc1d4f05384
Revises: 
Create Date: 2021-11-14 23:42:00.806684

"""
from uuid import uuid4
from datetime import datetime
import sqlalchemy as sa
from alembic import op
from sqlalchemy import MetaData, Table
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "4fc1d4f05384"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # first we need to create custom schema named "content"
    op.execute("create schema content")

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "roles",
        sa.Column(
            "created_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column("id", postgresql.UUID(as_uuid=True), default=uuid4, nullable=False),
        sa.Column("name", sa.String(length=80), nullable=True),
        sa.Column("description", sa.String(length=255), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("name"),
        schema="content",
    )
    op.create_table(
        "users",
        sa.Column(
            "created_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column(
            "updated_on", sa.DateTime(), server_default=sa.text("now()"), nullable=True
        ),
        sa.Column("id", postgresql.UUID(as_uuid=True), default=uuid4, nullable=False),
        sa.Column("login", sa.String(length=80), nullable=False),
        sa.Column("email", sa.String(length=255), nullable=True),
        sa.Column("password", sa.String(length=255), nullable=False),
        sa.Column("active", sa.Boolean(), nullable=True),
        sa.Column("last_login", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("id"),
        sa.UniqueConstraint("login"),
        schema="content",
    )
    op.create_table(
        "roles_users",
        sa.Column("id", sa.BigInteger(), nullable=False),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column("role_id", postgresql.UUID(as_uuid=True), nullable=True),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["content.roles.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["content.users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="content",
    )
    op.create_table(
        "auth_history",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("user_id", postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column("timestamp", sa.DateTime(), default=datetime.utcnow, nullable=False),
        sa.Column("user_agent", sa.String(200), nullable=False),
        sa.Column("ip_addr", sa.String(100), nullable=False),
        sa.Column("device", sa.Text, nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["content.users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="content",
    )

    # find existing table
    meta = MetaData(bind=op.get_bind())
    meta.reflect(only=("roles",), schema="content")
    roles_table = Table("roles", meta, schema="content")

    # create default roles that needed for base permissions assigning
    op.bulk_insert(
        roles_table,
        [
            {
                "id": str(uuid4()),
                "name": "guest",
                "description": "Designates that this user has basic permissions.",
            },
            {
                "id": str(uuid4()),
                "name": "superuser",
                "description": "Designates that this user has all permissions without explicitly assigning them.",
            },
            {
                "id": str(uuid4()),
                "name": "staff",
                "description": "Designates whether this user can access the admin service.",
            },
        ],
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("roles_users", schema="content")
    op.drop_table("users", schema="content")
    op.drop_table("roles", schema="content")
    # ### end Alembic commands ###

    op.execute("drop schema content")
